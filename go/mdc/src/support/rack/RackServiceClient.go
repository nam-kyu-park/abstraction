package rack

import (
	"LogManager"
	"crypto/rand"
	"math/big"
	"packet"
	"service"
	"time"
)

type ServiceClient struct {
	logger LogManager.Logger
	sender service.Sender
}

func (this *ServiceClient) SetSender(s service.Sender) {
	this.sender = s
}

func (this *ServiceClient) Active() {
	this.logger = LogManager.GetLogger("Service")
	go this.fork()
}

func (this *ServiceClient) Recv(p *packet.Packet) {

}

func (this *ServiceClient) RecvByte(b []byte) {

}

func (this *ServiceClient) Send() *packet.Packet {
	return nil
}

func (this *ServiceClient) fork() {
	for {
		time.Sleep(time.Second)
		data := []byte{0x46, 0x41, 0x20, 0x46, 0x41, 0x20, 0x30, 0x30, 0x20, 0x42, 0x36, 0x20, 0x34, 0x34, 0x20, 0x34, 0x33, 0x20, 0x34, 0x39, 0x20, 0x34, 0x44, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x31, 0x20, 0x30, 0x32, 0x20, 0x30, 0x31, 0x20, 0x34, 0x45, 0x20, 0x30, 0x30, 0x20, 0x32, 0x38, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x46, 0x42, 0x20, 0x46, 0x42, 0x20}
		this.sender.Write(data)
		this.logger.Info("\n%s", packet.Debug(data))
	}

}

func GetRandomInt64(max int64) int64 {
	n, err := rand.Int(rand.Reader, big.NewInt(max))
	if err != nil {
		panic(err)
	}
	return n.Int64()
}
